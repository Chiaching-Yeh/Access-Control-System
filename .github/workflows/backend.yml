name: Deploy Backend

on:
  workflow_dispatch:
  push:
    paths:
      - 'acs-backend/**'  # 只要 backend 資料夾有變更，就觸發這個 workflow #test
      - '.github/workflows/backend.yml'   # 或者這個 workflow 檔案本身有變更
    branches: [main] # 限定 main 分支

jobs:
  deploy-backend:
    runs-on: ubuntu-latest # 在 GitHub 提供的 Ubuntu runner 上執行

    steps:
      - name: Checkout source
        uses: actions/checkout@v3 # 把 GitHub Repo 的程式碼抓下來到 runner 上

      - name: Authenticate with Google Cloud # 設定 GCP 專案 ID（來自 GitHub Secret）
        uses: google-github-actions/auth@v1 # 使用 GCP 服務帳號金鑰登入（JSON）
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker us-west1-docker.pkg.dev # 設定 Docker 可以登入 GCP 的 Artifact Registry，用來推送 image

      - name: Build and Push Backend Docker Image  # 使用 backend 的 Dockerfile 打包 image，tag 成 artifact registry 格式，推送到 Artifact Registry，給 VM 拉取用
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_REGISTRY }}/acs-backend -f ./acs-backend/Dockerfile .
          docker push ${{ secrets.DOCKER_REGISTRY }}/acs-backend

      ## 這裡若沒有加 -f 指定 Dockerfile 的位置，而是單純把 ./acs-backend 當作 build context。
      # 它會預設在你指定的目錄 (./acs-backend) 裡找 Dockerfile。
      # 它會把 ./acs-backend 設為 build context（就是 COPY 指令的根目錄）。
      # 換句話說：這會讓 Docker 根本看不到根目錄的 acs-common/、pom.xml 等檔案。

      - name: SSH and Deploy Backend on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}   # GCP VM 的外部 IP
          username: ${{ secrets.VM_USER }}  # 登入使用者帳號
          key: ${{ secrets.VM_SSH_KEY }}  # 對應的 SSH 私鑰（貼在 GitHub Secret）
          # 從 Artifact Registry 拉下最新 backend image， # 使用 docker-compose 重新啟動 backend 服務（只更新 backend，不動其他）
          script: |
            docker pull ${{ secrets.DOCKER_REGISTRY }}/acs-backend
            docker-compose -f ~/Access-Control-System/docker-compose.yml up -d backend