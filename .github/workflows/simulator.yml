name: Deploy simulator

on:
  workflow_dispatch:
  push:
    paths:
      - 'simulator/**'
      - '.github/workflows/simulator.yml'
    branches: [main] # 限定 main 分支

jobs:
  deploy-simulator:
    runs-on: ubuntu-latest # 在 GitHub 提供的 Ubuntu runner 上執行

    steps:
      - name: Checkout source
        uses: actions/checkout@v4 # 把 GitHub Repo 的程式碼抓下來到 runner 上

      - name: Clean Docker Build Cache In Runner
        run: |
          echo "Cleaning up Docker resources..."
          docker system prune -af
          docker builder prune -af
          echo "Docker resources cleaned."

      - name: Authenticate with Google Cloud # 設定 GCP 專案 ID（來自 GitHub Secret）
        uses: google-github-actions/auth@v2 # 使用 GCP 服務帳號金鑰登入（JSON）
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Simulator Docker Image
        run: |
          echo "Deploying commit SHA: ${{ github.sha }}"
          IMAGE_TAG=${{ github.sha }}
          docker build \
            -t ${{ secrets.DOCKER_REGISTRY }}/acs-simulator:$IMAGE_TAG \
            -f ./simulator/Dockerfile \
            ./simulator
          docker push ${{ secrets.DOCKER_REGISTRY }}/acs-simulator:$IMAGE_TAG
          echo "🔍 Listing pushed image:"
          docker images | grep acs-simulator

      - name: SSH to VM via gcloud and deploy simulator
        env:
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_REDIS_HOST: ${{ secrets.SPRING_REDIS_HOST }}
          MQTT_BROKER: ${{ secrets.MQTT_BROKER }}
          MQTT_CLIENT_ID: ${{ secrets.MQTT_CLIENT_ID }}
          MQTT_USERNAME: ${{ secrets.MQTT_USERNAME }}
          MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}
          MQTT_HOST: ${{ secrets.MQTT_HOST }}
          MQTT_PORT: ${{ secrets.MQTT_PORT }}
          TZ: ${{ secrets.TZ }}
        run: |
          echo "🔐 將私鑰寫入 SSH 金鑰檔"
          mkdir -p ~/.ssh
          echo "$VM_SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          echo "🔐 加入 VM 到 known_hosts（避免首次連線提示）"
          ssh-keyscan -H $VM_HOST >> ~/.ssh/known_hosts

          echo "🧪 DOCKER_REGISTRY=$DOCKER_REGISTRY"
          echo "🧪 IMAGE_TAG=$IMAGE_TAG"
          echo "🧪 pull target = $DOCKER_REGISTRY/acs-simulator:$IMAGE_TAG"
          
          echo "🔁 開始登入並執行部署腳本"
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << EOF
          
            set -e 

            echo '🔁 [1/8] 設定 IMAGE_TAG、DOCKER_REGISTRY 環境變數'
            export IMAGE_TAG=$IMAGE_TAG
            export DOCKER_REGISTRY=$DOCKER_REGISTRY
          
            echo '🔁 [2/8] 確認 Access-Control-System 是否存在'
            if [ -d ~/Access-Control-System/.git ]; then
              echo '📦 已存在 Git 專案，執行 git pull'
              cd ~/Access-Control-System
              git pull origin main
            else
              echo '🔐 [前置] 加入 GitHub 到 VM 的 known_hosts（避免 host key verification failed）'
              mkdir -p ~/.ssh
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              echo '🆕 專案不存在，執行 git clone'
              git clone git@github.com:Chiaching-Yeh/Access-Control-System.git ~/Access-Control-System
            fi

            echo '🔁 [3/8] 切換至專案資料夾 ~/Access-Control-System'
            cd ~/Access-Control-System && pwd && ls -la
          
            echo "🔑 [4/8] 產生 .env 檔案"
            echo "POSTGRES_DB=$POSTGRES_DB" > .env
            echo "POSTGRES_USER=$POSTGRES_USER" >> .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
  
            echo "SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL" >> .env
            echo "SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD" >> .env
            echo "SPRING_REDIS_HOST=$SPRING_REDIS_HOST" >> .env
  
            echo "MQTT_BROKER=$MQTT_BROKER" >> .env
            echo "MQTT_CLIENT_ID=$MQTT_CLIENT_ID" >> .env
            echo "MQTT_USERNAME=$MQTT_USERNAME" >> .env
            echo "MQTT_PASSWORD=$MQTT_PASSWORD" >> .env
  
            echo "DOCKER_REGISTRY=$DOCKER_REGISTRY" >> .env
  
            echo "MQTT_HOST=$MQTT_HOST" >> .env
            echo "MQTT_PORT=$MQTT_PORT" >> .env
            echo "TZ=$TZ" >> .env
          
            echo '🔍 [5/8] 檢查 infra container 是否啟動'
            if [ -f /tmp/infra_ready ]; then
              echo '✅ 快取存在，略過 Infra 啟動'
            else
              echo '⚠️ 找不到快取，檢查 container 狀態並必要時啟動 Infra'
              if [ "$(docker inspect -f '{{.State.Running}}' acs-db 2>/dev/null)" != "true" ] || \
                 [ "$(docker inspect -f '{{.State.Running}}' acs-redis 2>/dev/null)" != "true" ] || \
                 [ "$(docker inspect -f '{{.State.Running}}' acs-mqtt 2>/dev/null)" != "true" ]; then
                 echo '🔧 有 infra container 未執行，重新啟動 Infra...'
                 docker compose -p access-control-system -f docker-compose-infra.yml up -d
                 echo "$(date)" > /tmp/infra_ready
              else
                 echo '✅ 所有 Infra container 正常執行，更新快取時間戳'
                 echo "$(date)" > /tmp/infra_ready
              fi
            fi
          
            echo "🔁 [6/8] 嘗試拉取映像 $DOCKER_REGISTRY/acs-simulator:$IMAGE_TAG"
            docker pull $DOCKER_REGISTRY/acs-simulator:$IMAGE_TAG
          
            echo "🔍 驗證映像已存在於本地"
            docker image inspect $DOCKER_REGISTRY/acs-simulator:$IMAGE_TAG >/dev/null && \
            echo "✅ 映像確認成功存在" || echo "❌ 拉取失敗"
          
            echo "🔐 [7/8] 額外安全驗證 確認 .env 與容器環境變數一致"
            if grep -q "$POSTGRES_DB" .env && grep -q "$MQTT_CLIENT_ID" .env; then
              echo "✅ .env 中包含機密變數，應為部署時自動產生"
            else
              echo "❌ .env 內容異常，機密變數缺失，請確認 CI/CD 是否注入失敗"
              exit 1
            fi
            if grep -i 'password' .env | grep -v '^#'; then
              echo "⚠️ .env 中包含 password 欄位，但已限制不顯示在 log"
            fi

            echo '🔁 [8/8] 執行 docker compose up'
            docker compose -p access-control-system -f docker-compose-infra.yml -f docker-compose-app.yml up -d simulator
            echo '✅ 部署完成'
          EOF